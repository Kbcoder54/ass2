Node* addNode(Node *root, int value){

    Node* newnode = newNode(value);

    Node* x = root;

    Node* y = NULL;
    while (x != NULL) {



        y = x;
        if (value < x->data){
            x = x->right;
        }
        else if (value > x->data){
            x = x->left;
        }
        else{
            y = NULL;
            newnode = NULL;
            break;
        }
    }


    if (y == NULL){

        y = newnode;
    }

    else if (value > y->data){
        y->left = newnode;
    }

    else if (value < y-> data){
        y->right = newnode;
    }


    return root;

}









void inorderarr(Node* root,int *arr,int *k){
    if(root == NULL){
        return;
    }

    inorderarr(root->right,arr,k);
    arr[(*k)++] = root->data;
    inorderarr(root->left,arr,k);


}
Node* help(int *arr,int low,int high){
    if(low>high){
        return NULL;
    }
    int mid = (low+high)/2;

    Node* root = newNode(arr[mid]);
    root->left = help(arr,low,mid-1);
    root->right = help(arr,mid+1,high);

    return root;


}
Node* balanceTree(Node* root)
{
	// TODO: Implement this function
	//Node* newroot;
	int count = countNodes(root);
	int k = 0;
	int *arr;

	//arr = calloc(count, sizeof(Node*));
	arr = (int*) malloc(count * sizeof(int));
	inorderarr(root,arr,&k);

	root = help(arr,0,count-1);
	free(arr);
	return root;
}